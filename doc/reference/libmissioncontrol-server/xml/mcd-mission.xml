<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="McdMission">
<refmeta>
<refentrytitle role="top_of_page" id="McdMission.top_of_page">McdMission</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBMISSIONCONTROL-SERVER Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>McdMission</refname>
<refpurpose>Base class for server classes</refpurpose>
</refnamediv>
<refsect1 id="McdMission.stability-level">
<title>Stability Level</title>
Unstable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="McdMission.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;mcd-mission.h&gt;

                    <link linkend="McdMission-struct">McdMission</link>;
<link linkend="gboolean">gboolean</link>            <link linkend="mcd-mission-is-connected">mcd_mission_is_connected</link>            (<link linkend="McdMission">McdMission</link> *mission);
<link linkend="McdMission">McdMission</link> *        <link linkend="mcd-mission-get-parent">mcd_mission_get_parent</link>              (<link linkend="McdMission">McdMission</link> *mission);
<link linkend="void">void</link>                <link linkend="mcd-mission-abort">mcd_mission_abort</link>                   (<link linkend="McdMission">McdMission</link> *mission);
<link linkend="void">void</link>                <link linkend="mcd-mission-connect">mcd_mission_connect</link>                 (<link linkend="McdMission">McdMission</link> *mission);
<link linkend="void">void</link>                <link linkend="mcd-mission-disconnect">mcd_mission_disconnect</link>              (<link linkend="McdMission">McdMission</link> *mission);
</synopsis>
</refsynopsisdiv>

<refsect1 id="McdMission.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----McdMission
         +----<link linkend="McdChannel">McdChannel</link>
         +----<link linkend="McdOperation">McdOperation</link>
         +----<link linkend="McdDispatcher">McdDispatcher</link>
</synopsis>
</refsect1>





<refsect1 id="McdMission.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="McdMission--parent">parent</link>&quot;                   <link linkend="McdMission">McdMission</link>*           : Read / Write
</synopsis>
</refsect1>

<refsect1 id="McdMission.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="McdMission-abort">abort</link>&quot;                                          : Run First
  &quot;<link linkend="McdMission-connected">connected</link>&quot;                                      : Run First
  &quot;<link linkend="McdMission-disconnected">disconnected</link>&quot;                                   : Run First
  &quot;<link linkend="McdMission-parent-set">parent-set</link>&quot;                                     : Run First
</synopsis>
</refsect1>


<refsect1 id="McdMission.description" role="desc">
<title role="desc.title">Description</title>
<para>
It is the base class for every object in mission-control. It defines
a set of virtual functions and set of corresponding action signals.
all virtual functions results in emission of their corresponding action
signals. The virtual functions define states of the object, such
as memory conserved state, connected state, locked state, low power state,
lit state, sleeping state etc. Each of the object states can also be queried
independently as properties.
</para>
<para>
There are also some action signals such as abort, which is used to notify
other objects holding hard references to it to release them (this object
should then automatically die since all held references are released). It
is mandatory for all other objects that hold a hard reference to it to
listen for this signal and release the reference in signal handler.
</para>
<para>
Concrete derived classes should override the sate  methods to implement
object specific state managements.</para>
<para>
</para>
</refsect1>

<refsect1 id="McdMission.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="McdMission-struct" role="struct">
<title>McdMission</title>
<indexterm zone="McdMission-struct"><primary sortas="McdMission">McdMission</primary></indexterm><programlisting>typedef struct _McdMission McdMission;</programlisting>
<para>
</para></refsect2>
<refsect2 id="mcd-mission-is-connected" role="function">
<title>mcd_mission_is_connected ()</title>
<indexterm zone="mcd-mission-is-connected"><primary sortas="mcd_mission_is_connected">mcd_mission_is_connected</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            mcd_mission_is_connected            (<link linkend="McdMission">McdMission</link> *mission);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mission</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mcd-mission-get-parent" role="function">
<title>mcd_mission_get_parent ()</title>
<indexterm zone="mcd-mission-get-parent"><primary sortas="mcd_mission_get_parent">mcd_mission_get_parent</primary></indexterm><programlisting><link linkend="McdMission">McdMission</link> *        mcd_mission_get_parent              (<link linkend="McdMission">McdMission</link> *mission);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mission</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mcd-mission-abort" role="function">
<title>mcd_mission_abort ()</title>
<indexterm zone="mcd-mission-abort"><primary sortas="mcd_mission_abort">mcd_mission_abort</primary></indexterm><programlisting><link linkend="void">void</link>                mcd_mission_abort                   (<link linkend="McdMission">McdMission</link> *mission);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mission</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mcd-mission-connect" role="function">
<title>mcd_mission_connect ()</title>
<indexterm zone="mcd-mission-connect"><primary sortas="mcd_mission_connect">mcd_mission_connect</primary></indexterm><programlisting><link linkend="void">void</link>                mcd_mission_connect                 (<link linkend="McdMission">McdMission</link> *mission);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mission</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mcd-mission-disconnect" role="function">
<title>mcd_mission_disconnect ()</title>
<indexterm zone="mcd-mission-disconnect"><primary sortas="mcd_mission_disconnect">mcd_mission_disconnect</primary></indexterm><programlisting><link linkend="void">void</link>                mcd_mission_disconnect              (<link linkend="McdMission">McdMission</link> *mission);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mission</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="McdMission.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="McdMission--parent" role="property"><title>The <literal>&quot;parent&quot;</literal> property</title>
<indexterm zone="McdMission--parent"><primary sortas="McdMission:parent">McdMission:parent</primary></indexterm><programlisting>  &quot;parent&quot;                   <link linkend="McdMission">McdMission</link>*           : Read / Write</programlisting>
<para>Parent mission.</para></refsect2>
</refsect1>

<refsect1 id="McdMission.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="McdMission-abort" role="signal"><title>The <literal>&quot;abort&quot;</literal> signal</title>
<indexterm zone="McdMission-abort"><primary sortas="McdMission::abort">McdMission::abort</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McdMission">McdMission</link> *mcdmission,
                                                        <link linkend="gpointer">gpointer</link>    user_data)       : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mcdmission</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McdMission-connected" role="signal"><title>The <literal>&quot;connected&quot;</literal> signal</title>
<indexterm zone="McdMission-connected"><primary sortas="McdMission::connected">McdMission::connected</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McdMission">McdMission</link> *mcdmission,
                                                        <link linkend="gpointer">gpointer</link>    user_data)       : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mcdmission</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McdMission-disconnected" role="signal"><title>The <literal>&quot;disconnected&quot;</literal> signal</title>
<indexterm zone="McdMission-disconnected"><primary sortas="McdMission::disconnected">McdMission::disconnected</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McdMission">McdMission</link> *mcdmission,
                                                        <link linkend="gpointer">gpointer</link>    user_data)       : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mcdmission</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McdMission-parent-set" role="signal"><title>The <literal>&quot;parent-set&quot;</literal> signal</title>
<indexterm zone="McdMission-parent-set"><primary sortas="McdMission::parent-set">McdMission::parent-set</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McdMission">McdMission</link> *mcdmission,
                                                        <link linkend="gpointer">gpointer</link>    user_data)       : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mcdmission</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
