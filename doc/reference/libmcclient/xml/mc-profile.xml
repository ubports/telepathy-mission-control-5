<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="McProfile">
<refmeta>
<refentrytitle role="top_of_page" id="McProfile.top_of_page">McProfile</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBMCCLIENT Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>McProfile</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="McProfile.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
enum                <link linkend="McProfileCapabilityFlags">McProfileCapabilityFlags</link>;
                    <link linkend="McProfile-struct">McProfile</link>;
                    <link linkend="McProfileClass">McProfileClass</link>;
<link linkend="McProfile">McProfile</link> *         <link linkend="mc-profile-lookup">mc_profile_lookup</link>                   (const <link linkend="gchar">gchar</link> *unique_name);
<link linkend="McProfile">McProfile</link> *         <link linkend="mc-profile-lookup-default-for-vcard-field">mc_profile_lookup_default_for_vcard_field</link>
                                                        (const <link linkend="gchar">gchar</link> *vcard_field);
<link linkend="gchar">gchar</link> *             <link linkend="mc-profile-get-filename">mc_profile_get_filename</link>             (const <link linkend="gchar">gchar</link> *unique_name);
<link linkend="void">void</link>                <link linkend="mc-profile-clear-cache">mc_profile_clear_cache</link>              (void);
<link linkend="GList">GList</link> *             <link linkend="mc-profiles-list">mc_profiles_list</link>                    (void);
<link linkend="GList">GList</link> *             <link linkend="mc-profiles-list-by-vcard-field">mc_profiles_list_by_vcard_field</link>     (const <link linkend="gchar">gchar</link> *vcard_field);
<link linkend="GList">GList</link> *             <link linkend="mc-profiles-list-by-protocol">mc_profiles_list_by_protocol</link>        (const <link linkend="gchar">gchar</link> *protocol);
<link linkend="void">void</link>                <link linkend="mc-profiles-free-list">mc_profiles_free_list</link>               (<link linkend="GList">GList</link> *list);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-unique-name">mc_profile_get_unique_name</link>          (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-configuration-ui">mc_profile_get_configuration_ui</link>     (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-display-name">mc_profile_get_display_name</link>         (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-icon-name">mc_profile_get_icon_name</link>            (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-branding-icon-name">mc_profile_get_branding_icon_name</link>   (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-vcard-field">mc_profile_get_vcard_field</link>          (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-default-account-domain">mc_profile_get_default_account_domain</link>
                                                        (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-avatar-mime-type">mc_profile_get_avatar_mime_type</link>     (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> * <link linkend="mc-profile-get-supported-presences">mc_profile_get_supported_presences</link>
                                                        (<link linkend="McProfile">McProfile</link> *id);
<link linkend="gboolean">gboolean</link>            <link linkend="mc-profile-supports-presence">mc_profile_supports_presence</link>        (<link linkend="McProfile">McProfile</link> *id,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> presence);
<link linkend="gint">gint</link>                <link linkend="mc-profile-get-priority">mc_profile_get_priority</link>             (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-default-account-name">mc_profile_get_default_account_name</link> (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-protocol-name">mc_profile_get_protocol_name</link>        (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-manager-name">mc_profile_get_manager_name</link>         (<link linkend="McProfile">McProfile</link> *id);
<link linkend="gboolean">gboolean</link>            <link linkend="mc-profile-is-default-for-vcard-field">mc_profile_is_default_for_vcard_field</link>
                                                        (<link linkend="McProfile">McProfile</link> *id);
<link linkend="McProfileCapabilityFlags">McProfileCapabilityFlags</link>  <link linkend="mc-profile-get-capabilities">mc_profile_get_capabilities</link>   (<link linkend="McProfile">McProfile</link> *id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-default-setting">mc_profile_get_default_setting</link>      (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *setting);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-profile-get-vcard-mangle">mc_profile_get_vcard_mangle</link>         (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *vcard_field);
<link linkend="gchar">gchar</link> *             <link linkend="mc-profile-presence-get-name">mc_profile_presence_get_name</link>        (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *presence);
<link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  <link linkend="mc-profile-presence-get-type">mc_profile_presence_get_type</link>  (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *presence);
<link linkend="gchar">gchar</link> *             <link linkend="mc-profile-presence-get-icon-name">mc_profile_presence_get_icon_name</link>   (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *presence);
</synopsis>
</refsynopsisdiv>

<refsect1 id="McProfile.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----McProfile
</synopsis>
</refsect1>








<refsect1 id="McProfile.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="McProfile.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="McProfileCapabilityFlags" role="enum">
<title>enum McProfileCapabilityFlags</title>
<indexterm zone="McProfileCapabilityFlags"><primary sortas="McProfileCapabilityFlags">McProfileCapabilityFlags</primary></indexterm><programlisting>typedef enum
{
    MC_PROFILE_CAPABILITY_NONE = 0,
    MC_PROFILE_CAPABILITY_CHAT_P2P = 1 &lt;&lt; 0,
    MC_PROFILE_CAPABILITY_CHAT_ROOM = 1 &lt;&lt; 1,
    MC_PROFILE_CAPABILITY_CHAT_ROOM_LIST = 1 &lt;&lt; 2,
    MC_PROFILE_CAPABILITY_VOICE_P2P = 1 &lt;&lt; 3,
    MC_PROFILE_CAPABILITY_CONTACT_SEARCH = 1 &lt;&lt; 4,
    MC_PROFILE_CAPABILITY_SPLIT_ACCOUNT = 1 &lt;&lt; 5,
    MC_PROFILE_CAPABILITY_REGISTRATION_UI = 1 &lt;&lt; 6,
    MC_PROFILE_CAPABILITY_SUPPORTS_AVATARS = 1 &lt;&lt; 7,
    MC_PROFILE_CAPABILITY_SUPPORTS_ALIAS = 1 &lt;&lt; 8,
    MC_PROFILE_CAPABILITY_SUPPORTS_ROSTER = 1 &lt;&lt; 9,
    MC_PROFILE_CAPABILITY_VIDEO_P2P = 1 &lt;&lt; 10,
} McProfileCapabilityFlags;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="McProfile-struct" role="struct">
<title>McProfile</title>
<indexterm zone="McProfile-struct"><primary sortas="McProfile">McProfile</primary></indexterm><programlisting>typedef struct _McProfile McProfile;</programlisting>
<para>
</para></refsect2>
<refsect2 id="McProfileClass" role="struct">
<title>McProfileClass</title>
<indexterm zone="McProfileClass"><primary sortas="McProfileClass">McProfileClass</primary></indexterm><programlisting>typedef struct {
        GObjectClass parent_class;
} McProfileClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="mc-profile-lookup" role="function">
<title>mc_profile_lookup ()</title>
<indexterm zone="mc-profile-lookup"><primary sortas="mc_profile_lookup">mc_profile_lookup</primary></indexterm><programlisting><link linkend="McProfile">McProfile</link> *         mc_profile_lookup                   (const <link linkend="gchar">gchar</link> *unique_name);</programlisting>
<para>
Get the profile whose unique name is the one specified. If no profile with
that name exists, a new one is created. The returned object's reference
count is incremented.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>unique_name</parameter>&#160;:</term>
<listitem><simpara> The unique name of the profile.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-lookup-default-for-vcard-field" role="function">
<title>mc_profile_lookup_default_for_vcard_field ()</title>
<indexterm zone="mc-profile-lookup-default-for-vcard-field"><primary sortas="mc_profile_lookup_default_for_vcard_field">mc_profile_lookup_default_for_vcard_field</primary></indexterm><programlisting><link linkend="McProfile">McProfile</link> *         mc_profile_lookup_default_for_vcard_field
                                                        (const <link linkend="gchar">gchar</link> *vcard_field);</programlisting>
<para>
Get the profile whose vcard field is the one specified. 
The returned object's reference count is incremented.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vcard_field</parameter>&#160;:</term>
<listitem><simpara> The vcard field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-filename" role="function">
<title>mc_profile_get_filename ()</title>
<indexterm zone="mc-profile-get-filename"><primary sortas="mc_profile_get_filename">mc_profile_get_filename</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             mc_profile_get_filename             (const <link linkend="gchar">gchar</link> *unique_name);</programlisting>
<para>
Get the .profile file path of the profile <parameter>unique_name</parameter>. This can be useful
for applications which wants to parse the .profile file themselves, for the
cases when the profile contains application specific data.
Note that this function is not meant to be used for creating new profiles:
if the .profile file does not exist, this functions fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>unique_name</parameter>&#160;:</term>
<listitem><simpara> The unique name of the profile.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The path of the .profile file, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-clear-cache" role="function">
<title>mc_profile_clear_cache ()</title>
<indexterm zone="mc-profile-clear-cache"><primary sortas="mc_profile_clear_cache">mc_profile_clear_cache</primary></indexterm><programlisting><link linkend="void">void</link>                mc_profile_clear_cache              (void);</programlisting>
<para>
Clears the profiles cache.</para>
<para>
</para></refsect2>
<refsect2 id="mc-profiles-list" role="function">
<title>mc_profiles_list ()</title>
<indexterm zone="mc-profiles-list"><primary sortas="mc_profiles_list">mc_profiles_list</primary></indexterm><programlisting><link linkend="GList">GList</link> *             mc_profiles_list                    (void);</programlisting>
<para>
Lists all configured profiles.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GList"><type>GList</type></link> of the profiles (must be freed with <link linkend="mc-profiles-free-list"><type>mc_profiles_free_list</type></link>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profiles-list-by-vcard-field" role="function">
<title>mc_profiles_list_by_vcard_field ()</title>
<indexterm zone="mc-profiles-list-by-vcard-field"><primary sortas="mc_profiles_list_by_vcard_field">mc_profiles_list_by_vcard_field</primary></indexterm><programlisting><link linkend="GList">GList</link> *             mc_profiles_list_by_vcard_field     (const <link linkend="gchar">gchar</link> *vcard_field);</programlisting>
<para>
Lists all configured profiles with the given vcard field..</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>vcard_field</parameter>&#160;:</term>
<listitem><simpara> The vcard field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GList"><type>GList</type></link> of the profiles (must be freed with <link linkend="mc-profiles-free-list"><type>mc_profiles_free_list</type></link>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profiles-list-by-protocol" role="function">
<title>mc_profiles_list_by_protocol ()</title>
<indexterm zone="mc-profiles-list-by-protocol"><primary sortas="mc_profiles_list_by_protocol">mc_profiles_list_by_protocol</primary></indexterm><programlisting><link linkend="GList">GList</link> *             mc_profiles_list_by_protocol        (const <link linkend="gchar">gchar</link> *protocol);</programlisting>
<para>
Lists all configured profiles for the given protocol.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>protocol</parameter>&#160;:</term>
<listitem><simpara> string id of the protocol.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GList"><type>GList</type></link> of the profiles (must be freed with <link linkend="mc-profiles-free-list"><type>mc_profiles_free_list</type></link>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profiles-free-list" role="function">
<title>mc_profiles_free_list ()</title>
<indexterm zone="mc-profiles-free-list"><primary sortas="mc_profiles_free_list">mc_profiles_free_list</primary></indexterm><programlisting><link linkend="void">void</link>                mc_profiles_free_list               (<link linkend="GList">GList</link> *list);</programlisting>
<para>
Frees a list of profiles.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GList"><type>GList</type></link> of <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-unique-name" role="function">
<title>mc_profile_get_unique_name ()</title>
<indexterm zone="mc-profile-get-unique-name"><primary sortas="mc_profile_get_unique_name">mc_profile_get_unique_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_unique_name          (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the unique name of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the unique name (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-configuration-ui" role="function">
<title>mc_profile_get_configuration_ui ()</title>
<indexterm zone="mc-profile-get-configuration-ui"><primary sortas="mc_profile_get_configuration_ui">mc_profile_get_configuration_ui</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_configuration_ui     (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the configuration ui of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the configuration ui (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-display-name" role="function">
<title>mc_profile_get_display_name ()</title>
<indexterm zone="mc-profile-get-display-name"><primary sortas="mc_profile_get_display_name">mc_profile_get_display_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_display_name         (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the display name of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the display name (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-icon-name" role="function">
<title>mc_profile_get_icon_name ()</title>
<indexterm zone="mc-profile-get-icon-name"><primary sortas="mc_profile_get_icon_name">mc_profile_get_icon_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_icon_name            (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the icon name of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the icon name (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-branding-icon-name" role="function">
<title>mc_profile_get_branding_icon_name ()</title>
<indexterm zone="mc-profile-get-branding-icon-name"><primary sortas="mc_profile_get_branding_icon_name">mc_profile_get_branding_icon_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_branding_icon_name   (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the branding icon name of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the branding icon name (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-vcard-field" role="function">
<title>mc_profile_get_vcard_field ()</title>
<indexterm zone="mc-profile-get-vcard-field"><primary sortas="mc_profile_get_vcard_field">mc_profile_get_vcard_field</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_vcard_field          (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the vcard field of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the vcard field (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-default-account-domain" role="function">
<title>mc_profile_get_default_account_domain ()</title>
<indexterm zone="mc-profile-get-default-account-domain"><primary sortas="mc_profile_get_default_account_domain">mc_profile_get_default_account_domain</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_default_account_domain
                                                        (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the default account domain of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the default account domain (must not be
freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-avatar-mime-type" role="function">
<title>mc_profile_get_avatar_mime_type ()</title>
<indexterm zone="mc-profile-get-avatar-mime-type"><primary sortas="mc_profile_get_avatar_mime_type">mc_profile_get_avatar_mime_type</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_avatar_mime_type     (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the preferred MIME type for the avatar.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the MIME type (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-supported-presences" role="function">
<title>mc_profile_get_supported_presences ()</title>
<indexterm zone="mc-profile-get-supported-presences"><primary sortas="mc_profile_get_supported_presences">mc_profile_get_supported_presences</primary></indexterm><programlisting>const <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> * mc_profile_get_supported_presences
                                                        (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Checks what presence states are supported by this profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated array listing all the supported <link linkend="McPresence"><type>McPresence</type></link>.
It must not be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-supports-presence" role="function">
<title>mc_profile_supports_presence ()</title>
<indexterm zone="mc-profile-supports-presence"><primary sortas="mc_profile_supports_presence">mc_profile_supports_presence</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            mc_profile_supports_presence        (<link linkend="McProfile">McProfile</link> *id,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> presence);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presence</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-priority" role="function">
<title>mc_profile_get_priority ()</title>
<indexterm zone="mc-profile-get-priority"><primary sortas="mc_profile_get_priority">mc_profile_get_priority</primary></indexterm><programlisting><link linkend="gint">gint</link>                mc_profile_get_priority             (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the priority of the profile, as an integer number.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the profile priority (0 meaning normal).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-default-account-name" role="function">
<title>mc_profile_get_default_account_name ()</title>
<indexterm zone="mc-profile-get-default-account-name"><primary sortas="mc_profile_get_default_account_name">mc_profile_get_default_account_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_default_account_name (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the default account display name.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the default account display name (must not be
freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-protocol-name" role="function">
<title>mc_profile_get_protocol_name ()</title>
<indexterm zone="mc-profile-get-protocol-name"><primary sortas="mc_profile_get_protocol_name">mc_profile_get_protocol_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_protocol_name        (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the protocol name of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the protocol name (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-manager-name" role="function">
<title>mc_profile_get_manager_name ()</title>
<indexterm zone="mc-profile-get-manager-name"><primary sortas="mc_profile_get_manager_name">mc_profile_get_manager_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_manager_name         (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Get the manager name of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the manager name (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-is-default-for-vcard-field" role="function">
<title>mc_profile_is_default_for_vcard_field ()</title>
<indexterm zone="mc-profile-is-default-for-vcard-field"><primary sortas="mc_profile_is_default_for_vcard_field">mc_profile_is_default_for_vcard_field</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            mc_profile_is_default_for_vcard_field
                                                        (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Checks if this is the default profile for the given vcard field.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a gboolean.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-capabilities" role="function">
<title>mc_profile_get_capabilities ()</title>
<indexterm zone="mc-profile-get-capabilities"><primary sortas="mc_profile_get_capabilities">mc_profile_get_capabilities</primary></indexterm><programlisting><link linkend="McProfileCapabilityFlags">McProfileCapabilityFlags</link>  mc_profile_get_capabilities   (<link linkend="McProfile">McProfile</link> *id);</programlisting>
<para>
Gets the capabilities of this profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a combination of <link linkend="McProfileCapabilityFlags"><type>McProfileCapabilityFlags</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-default-setting" role="function">
<title>mc_profile_get_default_setting ()</title>
<indexterm zone="mc-profile-get-default-setting"><primary sortas="mc_profile_get_default_setting">mc_profile_get_default_setting</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_default_setting      (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *setting);</programlisting>
<para>
Get the default value of a setting of the profile.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> The setting for which default value has to be retrieved.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the default setting (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-get-vcard-mangle" role="function">
<title>mc_profile_get_vcard_mangle ()</title>
<indexterm zone="mc-profile-get-vcard-mangle"><primary sortas="mc_profile_get_vcard_mangle">mc_profile_get_vcard_mangle</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_profile_get_vcard_mangle         (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *vcard_field);</programlisting>
<para>
Get a mangle to transform a foreign address to a handle this profile understands</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vcard_field</parameter>&#160;:</term>
<listitem><simpara> The vcard field for which to get the mangle
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing the mangle from the profile (must not be freed).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-presence-get-name" role="function">
<title>mc_profile_presence_get_name ()</title>
<indexterm zone="mc-profile-presence-get-name"><primary sortas="mc_profile_presence_get_name">mc_profile_presence_get_name</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             mc_profile_presence_get_name        (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *presence);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presence</parameter>&#160;:</term>
<listitem><simpara> status name of the presence.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the localized name of the presence status.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-presence-get-type" role="function">
<title>mc_profile_presence_get_type ()</title>
<indexterm zone="mc-profile-presence-get-type"><primary sortas="mc_profile_presence_get_type">mc_profile_presence_get_type</primary></indexterm><programlisting><link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link>  mc_profile_presence_get_type  (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *presence);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presence</parameter>&#160;:</term>
<listitem><simpara> status name of the presence.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link> of <parameter>presence</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-profile-presence-get-icon-name" role="function">
<title>mc_profile_presence_get_icon_name ()</title>
<indexterm zone="mc-profile-presence-get-icon-name"><primary sortas="mc_profile_presence_get_icon_name">mc_profile_presence_get_icon_name</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             mc_profile_presence_get_icon_name   (<link linkend="McProfile">McProfile</link> *id,
                                                         const <link linkend="gchar">gchar</link> *presence);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="McProfile"><type>McProfile</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presence</parameter>&#160;:</term>
<listitem><simpara> status name of the presence.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the branding icon name for <parameter>presence</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
