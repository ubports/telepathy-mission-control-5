<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libmcclient-mc-account">
<refmeta>
<refentrytitle role="top_of_page" id="libmcclient-mc-account.top_of_page">McAccount</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBMCCLIENT Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>McAccount</refname>
<refpurpose>proxy object for the Telepathy Account D-Bus API</refpurpose>
</refnamediv>

<refsynopsisdiv id="libmcclient-mc-account.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="McAccount"/>
<synopsis>

#include &lt;libmcclient/mc-account.h&gt;

                    <link linkend="McAccount-struct">McAccount</link>;
                    <link linkend="McAccountClass">McAccountClass</link>;
<link linkend="McAccount">McAccount</link> *         <link linkend="mc-account-new">mc_account_new</link>                      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *object_path);
<link linkend="void">void</link>                (<link linkend="McAccountWhenReadyCb">*McAccountWhenReadyCb</link>)             (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="mc-account-call-when-ready">mc_account_call_when_ready</link>          (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                (<link linkend="McAccountWhenReadyObjectCb">*McAccountWhenReadyObjectCb</link>)       (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="mc-account-call-when-iface-ready">mc_account_call_when_iface_ready</link>    (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="GQuark">GQuark</link> interface,
                                                         <link linkend="McAccountWhenReadyObjectCb">McAccountWhenReadyObjectCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="mc-account-call-when-all-ready">mc_account_call_when_all_ready</link>      (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyObjectCb">McAccountWhenReadyObjectCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         ...);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-get-display-name">mc_account_get_display_name</link>         (<link linkend="McAccount">McAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-get-icon">mc_account_get_icon</link>                 (<link linkend="McAccount">McAccount</link> *account);
<link linkend="gboolean">gboolean</link>            <link linkend="mc-account-is-valid">mc_account_is_valid</link>                 (<link linkend="McAccount">McAccount</link> *account);
<link linkend="gboolean">gboolean</link>            <link linkend="mc-account-is-enabled">mc_account_is_enabled</link>               (<link linkend="McAccount">McAccount</link> *account);
<link linkend="gboolean">gboolean</link>            <link linkend="mc-account-has-been-online">mc_account_has_been_online</link>          (<link linkend="McAccount">McAccount</link> *account);
<link linkend="gboolean">gboolean</link>            <link linkend="mc-account-connects-automatically">mc_account_connects_automatically</link>   (<link linkend="McAccount">McAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-get-nickname">mc_account_get_nickname</link>             (<link linkend="McAccount">McAccount</link> *account);
<link linkend="GHashTable">GHashTable</link> *        <link linkend="mc-account-get-parameters">mc_account_get_parameters</link>           (<link linkend="McAccount">McAccount</link> *account);
<link linkend="void">void</link>                <link linkend="mc-account-get-automatic-presence">mc_account_get_automatic_presence</link>   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> *type,
                                                         const <link linkend="gchar">gchar</link> **status,
                                                         const <link linkend="gchar">gchar</link> **message);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-get-connection-path">mc_account_get_connection_path</link>      (<link linkend="McAccount">McAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-get-connection-name">mc_account_get_connection_name</link>      (<link linkend="McAccount">McAccount</link> *account);
<link linkend="TpConnectionStatus">TpConnectionStatus</link>  <link linkend="mc-account-get-connection-status">mc_account_get_connection_status</link>    (<link linkend="McAccount">McAccount</link> *account);
<link linkend="TpConnectionStatusReason">TpConnectionStatusReason</link>  <link linkend="mc-account-get-connection-status-reason">mc_account_get_connection_status_reason</link>
                                                        (<link linkend="McAccount">McAccount</link> *account);
<link linkend="void">void</link>                <link linkend="mc-account-get-current-presence">mc_account_get_current_presence</link>     (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> *type,
                                                         const <link linkend="gchar">gchar</link> **status,
                                                         const <link linkend="gchar">gchar</link> **message);
<link linkend="void">void</link>                <link linkend="mc-account-get-requested-presence">mc_account_get_requested_presence</link>   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> *type,
                                                         const <link linkend="gchar">gchar</link> **status,
                                                         const <link linkend="gchar">gchar</link> **message);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-get-normalized-name">mc_account_get_normalized_name</link>      (<link linkend="McAccount">McAccount</link> *account);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-set-display-name">mc_account_set_display_name</link>        (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *display_name,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-set-icon">mc_account_set_icon</link>                (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *icon,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-set-enabled">mc_account_set_enabled</link>             (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> enabled,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-set-connect-automatically">mc_account_set_connect_automatically</link>
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> connect,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-set-nickname">mc_account_set_nickname</link>            (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *nickname,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-set-automatic-presence">mc_account_set_automatic_presence</link>  (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-set-requested-presence">mc_account_set_requested_presence</link>  (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="mc-account-avatar-call-when-ready">mc_account_avatar_call_when_ready</link>   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="mc-account-avatar-get">mc_account_avatar_get</link>               (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> **avatar,
                                                         <link linkend="gsize">gsize</link> *length,
                                                         const <link linkend="gchar">gchar</link> **mime_type);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-avatar-set">mc_account_avatar_set</link>              (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *avatar,
                                                         <link linkend="gsize">gsize</link> len,
                                                         const <link linkend="gchar">gchar</link> *mime_type,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="mc-account-compat-call-when-ready">mc_account_compat_call_when_ready</link>   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-compat-get-profile">mc_account_compat_get_profile</link>       (<link linkend="McAccount">McAccount</link> *account);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-compat-get-avatar-file">mc_account_compat_get_avatar_file</link>   (<link linkend="McAccount">McAccount</link> *account);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-compat-set-profile">mc_account_compat_set_profile</link>      (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *profile,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-compat-set-secondary-vcard-fields">mc_account_compat_set_secondary_vcard_fields</link>
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> * const *fields,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="mc-account-conditions-call-when-ready">mc_account_conditions_call_when_ready</link>
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="GHashTable">GHashTable</link> *        <link linkend="mc-account-conditions-get">mc_account_conditions_get</link>           (<link linkend="McAccount">McAccount</link> *account);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-account-conditions-set">mc_account_conditions_set</link>          (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="GHashTable">GHashTable</link> *conditions,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
                    <link linkend="McAccountChannelrequestData">McAccountChannelrequestData</link>;
enum                <link linkend="McAccountChannelrequestEvent">McAccountChannelrequestEvent</link>;
<link linkend="void">void</link>                (<link linkend="McAccountChannelrequestCb">*McAccountChannelrequestCb</link>)        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id,
                                                         <link linkend="McAccountChannelrequestEvent">McAccountChannelrequestEvent</link> event,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
enum                <link linkend="McAccountChannelrequestFlags">McAccountChannelrequestFlags</link>;
<link linkend="guint">guint</link>               <link linkend="mc-account-channelrequest">mc_account_channelrequest</link>           (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="McAccountChannelrequestData">McAccountChannelrequestData</link> *req_data,
                                                         <link linkend="time-t">time_t</link> user_action_time,
                                                         const <link linkend="gchar">gchar</link> *handler,
                                                         <link linkend="McAccountChannelrequestFlags">McAccountChannelrequestFlags</link> flags,
                                                         <link linkend="McAccountChannelrequestCb">McAccountChannelrequestCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="guint">guint</link>               <link linkend="mc-account-channelrequest-ht">mc_account_channelrequest_ht</link>        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="GHashTable">GHashTable</link> *properties,
                                                         <link linkend="time-t">time_t</link> user_action_time,
                                                         const <link linkend="gchar">gchar</link> *handler,
                                                         <link linkend="McAccountChannelrequestFlags">McAccountChannelrequestFlags</link> flags,
                                                         <link linkend="McAccountChannelrequestCb">McAccountChannelrequestCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="guint">guint</link>               <link linkend="mc-account-channelrequest-add">mc_account_channelrequest_add</link>       (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GHashTable">GHashTable</link> *properties,
                                                         <link linkend="McAccountChannelrequestCb">McAccountChannelrequestCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                <link linkend="mc-account-channelrequest-cancel">mc_account_channelrequest_cancel</link>    (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id);
const <link linkend="GError">GError</link> *      <link linkend="mc-account-channelrequest-get-error">mc_account_channelrequest_get_error</link> (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id);
const <link linkend="gchar">gchar</link> *       <link linkend="mc-account-channelrequest-get-path">mc_account_channelrequest_get_path</link>  (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id);
<link linkend="guint">guint</link>               <link linkend="mc-account-channelrequest-get-from-path">mc_account_channelrequest_get_from_path</link>
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *object_path);


<link linkend="void">void</link>                (<link linkend="mc-cli-account-signal-callback-removed">*mc_cli_account_signal_callback_removed</link>)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="mc-cli-account-connect-to-removed">mc_cli_account_connect_to_removed</link>
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="mc-cli-account-signal-callback-removed">mc_cli_account_signal_callback_removed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="mc-cli-account-signal-callback-account-property-changed">*mc_cli_account_signal_callback_account_property_changed</link>)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Properties,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="mc-cli-account-connect-to-account-property-changed">mc_cli_account_connect_to_account_property_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="mc-cli-account-signal-callback-account-property-changed">mc_cli_account_signal_callback_account_property_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                (<link linkend="mc-cli-account-callback-for-remove">*mc_cli_account_callback_for_remove</link>)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-cli-account-call-remove">mc_cli_account_call_remove</link>         (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="mc-cli-account-callback-for-remove">mc_cli_account_callback_for_remove</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="mc-cli-account-callback-for-update-parameters">*mc_cli_account_callback_for_update_parameters</link>)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Reconnect_Required,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * <link linkend="mc-cli-account-call-update-parameters">mc_cli_account_call_update_parameters</link>
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Set,
                                                         const <link linkend="gchar">gchar</link> **in_Unset,
                                                         <link linkend="mc-cli-account-callback-for-update-parameters">mc_cli_account_callback_for_update_parameters</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="void">void</link>                (<link linkend="mc-cli-account-interface-avatar-signal-callback-avatar-changed">*mc_cli_account_interface_avatar_signal_callback_avatar_changed</link>)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);
<link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * <link linkend="mc-cli-account-interface-avatar-connect-to-avatar-changed">mc_cli_account_interface_avatar_connect_to_avatar_changed</link>
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="mc-cli-account-interface-avatar-signal-callback-avatar-changed">mc_cli_account_interface_avatar_signal_callback_avatar_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libmcclient-mc-account.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="TpProxy">TpProxy</link>
         +----McAccount
</synopsis>
</refsect1>






<refsect1 id="libmcclient-mc-account.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="McAccount-avatar-changed">avatar-changed</link>&quot;                                 : Run Last / Has Details
  &quot;<link linkend="McAccount-channel-count-changed">channel-count-changed</link>&quot;                          : Run Last
  &quot;<link linkend="McAccount-connection-status-changed">connection-status-changed</link>&quot;                      : Run Last
  &quot;<link linkend="McAccount-flag-changed">flag-changed</link>&quot;                                   : Run Last / Has Details
  &quot;<link linkend="McAccount-parameters-changed">parameters-changed</link>&quot;                             : Run Last / Has Details
  &quot;<link linkend="McAccount-presence-changed">presence-changed</link>&quot;                               : Run Last / Has Details
  &quot;<link linkend="McAccount-string-changed">string-changed</link>&quot;                                 : Run Last / Has Details
</synopsis>
</refsect1>


<refsect1 id="libmcclient-mc-account.description" role="desc">
<title role="desc.title">Description</title>
<para>
This module provides a client-side proxy object for the Telepathy
Account D-Bus API.</para>
<para>
</para>
</refsect1>

<refsect1 id="libmcclient-mc-account.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="McAccount-struct" role="struct">
<title>McAccount</title>
<indexterm zone="McAccount-struct"><primary sortas="McAccount">McAccount</primary></indexterm><programlisting>typedef struct {
    TpProxy parent;
    gchar *name;
    gchar *manager_name;
    gchar *protocol_name;
} McAccount;
</programlisting>
<para>
A proxy object for the Telepathy Account D-Bus API. This is a subclass of
<link linkend="TpProxy"><type>TpProxy</type></link>.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="TpProxy">TpProxy</link>&#160;<structfield>parent</structfield>;</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link> for the account object.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>name</structfield>;</term>
<listitem><simpara> the name of the account; currently it's the variable part of the
D-Bus object path. (read-only)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>manager_name</structfield>;</term>
<listitem><simpara> the name of the Telepathy manager. (read-only)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>protocol_name</structfield>;</term>
<listitem><simpara> the name of the protocol. (read-only)
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="McAccountClass" role="struct">
<title>McAccountClass</title>
<indexterm zone="McAccountClass"><primary sortas="McAccountClass">McAccountClass</primary></indexterm><programlisting>typedef struct _McAccountClass McAccountClass;</programlisting>
<para>
The class of a <link linkend="McAccount"><type>McAccount</type></link>.</para>
<para>
</para></refsect2>
<refsect2 id="mc-account-new" role="function">
<title>mc_account_new ()</title>
<indexterm zone="mc-account-new"><primary sortas="mc_account_new">mc_account_new</primary></indexterm><programlisting><link linkend="McAccount">McAccount</link> *         mc_account_new                      (<link linkend="TpDBusDaemon">TpDBusDaemon</link> *dbus,
                                                         const <link linkend="gchar">gchar</link> *object_path);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dbus</parameter>&#160;:</term>
<listitem><simpara> a D-Bus daemon; may not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> the path of the D-Bus account object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="McAccount"><type>McAccount</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="McAccountWhenReadyCb" role="function">
<title>McAccountWhenReadyCb ()</title>
<indexterm zone="McAccountWhenReadyCb"><primary sortas="McAccountWhenReadyCb">McAccountWhenReadyCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*McAccountWhenReadyCb)             (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the interface is ready for use, or the error with which it
was invalidated if it is now invalid.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the user data that was passed to <link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-call-when-ready" role="function">
<title>mc_account_call_when_ready ()</title>
<indexterm zone="mc-account-call-when-ready"><primary sortas="mc_account_call_when_ready">mc_account_call_when_ready</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_call_when_ready          (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Start retrieving and monitoring the properties of the base interface of
<parameter>account</parameter>. If they have already been retrieved, call <parameter>callback</parameter> immediately,
then return. Otherwise, <parameter>callback</parameter> will be called when the properties are
ready.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the interface becomes ready or invalidated, whichever
happens first.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="McAccountWhenReadyObjectCb" role="function">
<title>McAccountWhenReadyObjectCb ()</title>
<indexterm zone="McAccountWhenReadyObjectCb"><primary sortas="McAccountWhenReadyObjectCb">McAccountWhenReadyObjectCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*McAccountWhenReadyObjectCb)       (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the interface is ready for use, or the error with which it
was invalidated if it is now invalid.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the user data that was passed to
<link linkend="mc-account-call-when-iface-ready"><function>mc_account_call_when_iface_ready()</function></link> or <link linkend="mc-account-call-when-all-ready"><function>mc_account_call_when_all_ready()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GObject"><type>GObject</type></link> that was passed to
<link linkend="mc-account-call-when-iface-ready"><function>mc_account_call_when_iface_ready()</function></link> or <link linkend="mc-account-call-when-all-ready"><function>mc_account_call_when_all_ready()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-call-when-iface-ready" role="function">
<title>mc_account_call_when_iface_ready ()</title>
<indexterm zone="mc-account-call-when-iface-ready"><primary sortas="mc_account_call_when_iface_ready">mc_account_call_when_iface_ready</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_call_when_iface_ready    (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="GQuark">GQuark</link> interface,
                                                         <link linkend="McAccountWhenReadyObjectCb">McAccountWhenReadyObjectCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start retrieving and monitoring the properties of the interface <parameter>interface</parameter>
of <parameter>account</parameter>. If they have already been retrieved, call <parameter>callback</parameter>
immediately, then return. Otherwise, <parameter>callback</parameter> will be called when the
properties are ready.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GQuark"><type>GQuark</type></link> representing the interface to process.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the interface becomes ready or invalidated, whichever
happens first.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the call has
succeeded, failed or been cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; if
it is destroyed, this call will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if
<parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-call-when-all-ready" role="function">
<title>mc_account_call_when_all_ready ()</title>
<indexterm zone="mc-account-call-when-all-ready"><primary sortas="mc_account_call_when_all_ready">mc_account_call_when_all_ready</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_call_when_all_ready      (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyObjectCb">McAccountWhenReadyObjectCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         ...);</programlisting>
<para>
Start retrieving and monitoring the properties of the specified interfaces
of <parameter>account</parameter>. This is a convenience function built around
<link linkend="mc-account-call-when-iface-ready"><function>mc_account_call_when_iface_ready()</function></link>, to have <parameter>callback</parameter> called only once all
the specified interfaces are ready. In case more than one interface fail to
be processed, the <link linkend="GError"><type>GError</type></link> passed to the callback function will be the one of
the first interface that failed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the interfaces becomes ready or invalidated,
whichever happens first.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the call has
succeeded, failed or been cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; if
it is destroyed, this call will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if
<parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> a list of <link linkend="GQuark"><type>GQuark</type></link> types representing the interfaces to process,
followed by <link linkend="0--CAPS"><literal>0</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-display-name" role="function">
<title>mc_account_get_display_name ()</title>
<indexterm zone="mc-account-get-display-name"><primary sortas="mc_account_get_display_name">mc_account_get_display_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_get_display_name         (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constant string representing the account display name.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-icon" role="function">
<title>mc_account_get_icon ()</title>
<indexterm zone="mc-account-get-icon"><primary sortas="mc_account_get_icon">mc_account_get_icon</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_get_icon                 (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constant string representing the account icon name.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-is-valid" role="function">
<title>mc_account_is_valid ()</title>
<indexterm zone="mc-account-is-valid"><primary sortas="mc_account_is_valid">mc_account_is_valid</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            mc_account_is_valid                 (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the account is valid, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-is-enabled" role="function">
<title>mc_account_is_enabled ()</title>
<indexterm zone="mc-account-is-enabled"><primary sortas="mc_account_is_enabled">mc_account_is_enabled</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            mc_account_is_enabled               (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the account is enabled, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-has-been-online" role="function">
<title>mc_account_has_been_online ()</title>
<indexterm zone="mc-account-has-been-online"><primary sortas="mc_account_has_been_online">mc_account_has_been_online</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            mc_account_has_been_online          (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the account has ever been online, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-connects-automatically" role="function">
<title>mc_account_connects_automatically ()</title>
<indexterm zone="mc-account-connects-automatically"><primary sortas="mc_account_connects_automatically">mc_account_connects_automatically</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            mc_account_connects_automatically   (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the account automatically connects when possible, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>
otherwise.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-nickname" role="function">
<title>mc_account_get_nickname ()</title>
<indexterm zone="mc-account-get-nickname"><primary sortas="mc_account_get_nickname">mc_account_get_nickname</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_get_nickname             (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the nickname (alias) of <parameter>account</parameter>.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-parameters" role="function">
<title>mc_account_get_parameters ()</title>
<indexterm zone="mc-account-get-parameters"><primary sortas="mc_account_get_parameters">mc_account_get_parameters</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link> *        mc_account_get_parameters           (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constant <link linkend="GHashTable"><type>GHashTable</type></link> (do not destroy or modify it) listing the
account parameters. The keys in the hash table are strings representing the
parameter names, and the values are stored in <link linkend="GValue"><type>GValue</type></link> types.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-automatic-presence" role="function">
<title>mc_account_get_automatic_presence ()</title>
<indexterm zone="mc-account-get-automatic-presence"><primary sortas="mc_account_get_automatic_presence">mc_account_get_automatic_presence</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_get_automatic_presence   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> *type,
                                                         const <link linkend="gchar">gchar</link> **status,
                                                         const <link linkend="gchar">gchar</link> **message);</programlisting>
<para>
Retrieves the automatic presence (the presence this account will request
when going automatically online).
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link> to receive the presence type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> pointer that will receive the presence status string (to be not
modified or free'd).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> pointer that will receive the presence status message string (to
be not modified or free'd).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-connection-path" role="function">
<title>mc_account_get_connection_path ()</title>
<indexterm zone="mc-account-get-connection-path"><primary sortas="mc_account_get_connection_path">mc_account_get_connection_path</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_get_connection_path      (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constant string representing the D-Bus path of the Telepathy
connection object, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the account is disconnected.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-connection-name" role="function">
<title>mc_account_get_connection_name ()</title>
<indexterm zone="mc-account-get-connection-name"><primary sortas="mc_account_get_connection_name">mc_account_get_connection_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_get_connection_name      (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
<parameter>deprecated</parameter>: use <link linkend="mc-account-get-connection-path"><function>mc_account_get_connection_path()</function></link> instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-connection-status" role="function">
<title>mc_account_get_connection_status ()</title>
<indexterm zone="mc-account-get-connection-status"><primary sortas="mc_account_get_connection_status">mc_account_get_connection_status</primary></indexterm><programlisting><link linkend="TpConnectionStatus">TpConnectionStatus</link>  mc_account_get_connection_status    (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the connection status of the Telepathy connection object.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-connection-status-reason" role="function">
<title>mc_account_get_connection_status_reason ()</title>
<indexterm zone="mc-account-get-connection-status-reason"><primary sortas="mc_account_get_connection_status_reason">mc_account_get_connection_status_reason</primary></indexterm><programlisting><link linkend="TpConnectionStatusReason">TpConnectionStatusReason</link>  mc_account_get_connection_status_reason
                                                        (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the connection status reason of the Telepathy connection object.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-current-presence" role="function">
<title>mc_account_get_current_presence ()</title>
<indexterm zone="mc-account-get-current-presence"><primary sortas="mc_account_get_current_presence">mc_account_get_current_presence</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_get_current_presence     (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> *type,
                                                         const <link linkend="gchar">gchar</link> **status,
                                                         const <link linkend="gchar">gchar</link> **message);</programlisting>
<para>
Retrieves the current presence of <parameter>account</parameter>.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link> to receive the presence type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> pointer that will receive the presence status string (to be not
modified or free'd).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> pointer that will receive the presence status message string (to
be not modified or free'd).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-requested-presence" role="function">
<title>mc_account_get_requested_presence ()</title>
<indexterm zone="mc-account-get-requested-presence"><primary sortas="mc_account_get_requested_presence">mc_account_get_requested_presence</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_get_requested_presence   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> *type,
                                                         const <link linkend="gchar">gchar</link> **status,
                                                         const <link linkend="gchar">gchar</link> **message);</programlisting>
<para>
Retrieves the requested presence of <parameter>account</parameter>.
<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> pointer to a <link linkend="TpConnectionPresenceType"><type>TpConnectionPresenceType</type></link> to receive the presence type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> pointer that will receive the presence status string (to be not
modified or free'd).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> pointer that will receive the presence status message string (to
be not modified or free'd).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-get-normalized-name" role="function">
<title>mc_account_get_normalized_name ()</title>
<indexterm zone="mc-account-get-normalized-name"><primary sortas="mc_account_get_normalized_name">mc_account_get_normalized_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_get_normalized_name      (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constant string representing the normalized name of <parameter>account</parameter>.
This is the value returned from Telepathy when inspecting the self handle,
and will be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the account never went online.
connection object, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the account is disconnected.

<link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> must have been successfully invoked prior to
calling this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-set-display-name" role="function">
<title>mc_account_set_display_name ()</title>
<indexterm zone="mc-account-set-display-name"><primary sortas="mc_account_set_display_name">mc_account_set_display_name</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_set_display_name        (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *display_name,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Set the display name of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>display_name</parameter>&#160;:</term>
<listitem><simpara> display name to be set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-set-icon" role="function">
<title>mc_account_set_icon ()</title>
<indexterm zone="mc-account-set-icon"><primary sortas="mc_account_set_icon">mc_account_set_icon</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_set_icon                (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *icon,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Set the icon of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon</parameter>&#160;:</term>
<listitem><simpara> icon name to be set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-set-enabled" role="function">
<title>mc_account_set_enabled ()</title>
<indexterm zone="mc-account-set-enabled"><primary sortas="mc_account_set_enabled">mc_account_set_enabled</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_set_enabled             (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> enabled,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Enables or disables <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>enabled</parameter>&#160;:</term>
<listitem><simpara> whether the <parameter>account</parameter> must be enabled.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-set-connect-automatically" role="function">
<title>mc_account_set_connect_automatically ()</title>
<indexterm zone="mc-account-set-connect-automatically"><primary sortas="mc_account_set_connect_automatically">mc_account_set_connect_automatically</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_set_connect_automatically
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="gboolean">gboolean</link> connect,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Enables or disables automatic connection for <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>connect</parameter>&#160;:</term>
<listitem><simpara> whether the <parameter>account</parameter> must connect automatically.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-set-nickname" role="function">
<title>mc_account_set_nickname ()</title>
<indexterm zone="mc-account-set-nickname"><primary sortas="mc_account_set_nickname">mc_account_set_nickname</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_set_nickname            (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *nickname,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Set the nickname (alias) of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nickname</parameter>&#160;:</term>
<listitem><simpara> nickname to be set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-set-automatic-presence" role="function">
<title>mc_account_set_automatic_presence ()</title>
<indexterm zone="mc-account-set-automatic-presence"><primary sortas="mc_account_set_automatic_presence">mc_account_set_automatic_presence</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_set_automatic_presence  (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Set the automatic presence of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the presence type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> the presence status string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> the presence status message.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-set-requested-presence" role="function">
<title>mc_account_set_requested_presence ()</title>
<indexterm zone="mc-account-set-requested-presence"><primary sortas="mc_account_set_requested_presence">mc_account_set_requested_presence</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_set_requested_presence  (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="TpConnectionPresenceType">TpConnectionPresenceType</link> type,
                                                         const <link linkend="gchar">gchar</link> *status,
                                                         const <link linkend="gchar">gchar</link> *message,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Set the requested presence of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the presence type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> the presence status string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> the presence status message.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-avatar-call-when-ready" role="function">
<title>mc_account_avatar_call_when_ready ()</title>
<indexterm zone="mc-account-avatar-call-when-ready"><primary sortas="mc_account_avatar_call_when_ready">mc_account_avatar_call_when_ready</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_avatar_call_when_ready   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Start retrieving and monitoring the properties of the Avatar interface of
<parameter>account</parameter>. If they have already been retrieved, call <parameter>callback</parameter> immediately,
then return. Otherwise, <parameter>callback</parameter> will be called when the properties are
ready.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the interface becomes ready or invalidated, whichever
happens first.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-avatar-get" role="function">
<title>mc_account_avatar_get ()</title>
<indexterm zone="mc-account-avatar-get"><primary sortas="mc_account_avatar_get">mc_account_avatar_get</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_avatar_get               (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> **avatar,
                                                         <link linkend="gsize">gsize</link> *length,
                                                         const <link linkend="gchar">gchar</link> **mime_type);</programlisting>
<para>
Retrieves the avatar file contents and MIME type.
</para>
<para>
<link linkend="mc-account-avatar-call-when-ready"><function>mc_account_avatar_call_when_ready()</function></link> must have been successfully invoked
prior to calling this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>avatar</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-avatar-set" role="function">
<title>mc_account_avatar_set ()</title>
<indexterm zone="mc-account-avatar-set"><primary sortas="mc_account_avatar_set">mc_account_avatar_set</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_avatar_set              (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *avatar,
                                                         <link linkend="gsize">gsize</link> len,
                                                         const <link linkend="gchar">gchar</link> *mime_type,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Set the secondary VCard fields for <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>avatar</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-compat-call-when-ready" role="function">
<title>mc_account_compat_call_when_ready ()</title>
<indexterm zone="mc-account-compat-call-when-ready"><primary sortas="mc_account_compat_call_when_ready">mc_account_compat_call_when_ready</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_compat_call_when_ready   (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Start retrieving and monitoring the properties of the Compat interface of
<parameter>account</parameter>. If they have already been retrieved, call <parameter>callback</parameter> immediately,
then return. Otherwise, <parameter>callback</parameter> will be called when the properties are
ready.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the interface becomes ready or invalidated, whichever
happens first.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-compat-get-profile" role="function">
<title>mc_account_compat_get_profile ()</title>
<indexterm zone="mc-account-compat-get-profile"><primary sortas="mc_account_compat_get_profile">mc_account_compat_get_profile</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_compat_get_profile       (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
Retrieves the profile name of <parameter>account</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constant string representing the name of the profile.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-compat-get-avatar-file" role="function">
<title>mc_account_compat_get_avatar_file ()</title>
<indexterm zone="mc-account-compat-get-avatar-file"><primary sortas="mc_account_compat_get_avatar_file">mc_account_compat_get_avatar_file</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_compat_get_avatar_file   (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constant string representing the filename of the avatar.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-compat-set-profile" role="function">
<title>mc_account_compat_set_profile ()</title>
<indexterm zone="mc-account-compat-set-profile"><primary sortas="mc_account_compat_set_profile">mc_account_compat_set_profile</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_compat_set_profile      (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *profile,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>profile</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-compat-set-secondary-vcard-fields" role="function">
<title>mc_account_compat_set_secondary_vcard_fields ()</title>
<indexterm zone="mc-account-compat-set-secondary-vcard-fields"><primary sortas="mc_account_compat_set_secondary_vcard_fields">mc_account_compat_set_secondary_vcard_fields</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_compat_set_secondary_vcard_fields
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> * const *fields,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fields</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-conditions-call-when-ready" role="function">
<title>mc_account_conditions_call_when_ready ()</title>
<indexterm zone="mc-account-conditions-call-when-ready"><primary sortas="mc_account_conditions_call_when_ready">mc_account_conditions_call_when_ready</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_conditions_call_when_ready
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="McAccountWhenReadyCb">McAccountWhenReadyCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Start retrieving and monitoring the properties of the Conditions interface
of <parameter>account</parameter>. If they have already been retrieved, call <parameter>callback</parameter>
immediately, then return. Otherwise, <parameter>callback</parameter> will be called when the
properties are ready.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the interface becomes ready or invalidated, whichever
happens first.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-conditions-get" role="function">
<title>mc_account_conditions_get ()</title>
<indexterm zone="mc-account-conditions-get"><primary sortas="mc_account_conditions_get">mc_account_conditions_get</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link> *        mc_account_conditions_get           (<link linkend="McAccount">McAccount</link> *account);</programlisting>
<para>
Retrieves the account conditions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> containing the account conditions, where both keys
and values are NULL-terminated strings. It must not be modified or
destroyed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-conditions-set" role="function">
<title>mc_account_conditions_set ()</title>
<indexterm zone="mc-account-conditions-set"><primary sortas="mc_account_conditions_set">mc_account_conditions_set</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_account_conditions_set          (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="GHashTable">GHashTable</link> *conditions,
                                                         <link linkend="tp-cli-dbus-properties-callback-for-set">tp_cli_dbus_properties_callback_for_set</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Set the conditions for <parameter>account</parameter>; the <parameter>conditions</parameter> must be in a <link linkend="GHashTable"><type>GHashTable</type></link>
where both keys and valus are NULL-terminated strings. It will not be
modified by this method.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>conditions</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> with the conditions to set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to be invoked when the operation completes, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data for <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> function for <parameter>user_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> if not NULL, a GObject which will be weakly referenced; if it
is destroyed, this call will automatically be cancelled. Must be NULL if
callback is NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> for the underlying D-Bus call.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="McAccountChannelrequestData" role="struct">
<title>McAccountChannelrequestData</title>
<indexterm zone="McAccountChannelrequestData"><primary sortas="McAccountChannelrequestData">McAccountChannelrequestData</primary></indexterm><programlisting>typedef struct {
    guint32 _mask;
    GQuark fld_channel_type;
    guint fld_target_handle;
    TpHandleType fld_target_handle_type;
    const gchar *fld_target_id;
} McAccountChannelrequestData;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="McAccountChannelrequestEvent" role="enum">
<title>enum McAccountChannelrequestEvent</title>
<indexterm zone="McAccountChannelrequestEvent"><primary sortas="McAccountChannelrequestEvent">McAccountChannelrequestEvent</primary></indexterm><programlisting>typedef enum
{
    MC_ACCOUNT_CR_SUCCEEDED,
    MC_ACCOUNT_CR_FAILED,
    MC_ACCOUNT_CR_CANCELLED,
} McAccountChannelrequestEvent;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="McAccountChannelrequestCb" role="function">
<title>McAccountChannelrequestCb ()</title>
<indexterm zone="McAccountChannelrequestCb"><primary sortas="McAccountChannelrequestCb">McAccountChannelrequestCb</primary></indexterm><programlisting><link linkend="void">void</link>                (*McAccountChannelrequestCb)        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id,
                                                         <link linkend="McAccountChannelrequestEvent">McAccountChannelrequestEvent</link> event,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
This callback will be called when some event occurs on the channel request.
If the event is one of <link linkend="MC-ACCOUNT-CR-SUCCEEDED--CAPS"><literal>MC_ACCOUNT_CR_SUCCEEDED</literal></link>, <link linkend="MC-ACCOUNT-CR-FAILED--CAPS"><literal>MC_ACCOUNT_CR_FAILED</literal></link> or
<link linkend="MC-ACCOUNT-CR-CANCELLED--CAPS"><literal>MC_ACCOUNT_CR_CANCELLED</literal></link>, the channel request should be considered
completed, and <parameter>request_id</parameter> will be no longer valid.
This callback could be called multiple times, in case some other events than
<link linkend="MC-ACCOUNT-CR-SUCCEEDED--CAPS"><literal>MC_ACCOUNT_CR_SUCCEEDED</literal></link>, <link linkend="MC-ACCOUNT-CR-FAILED--CAPS"><literal>MC_ACCOUNT_CR_FAILED</literal></link> and <link linkend="MC-ACCOUNT-CR-CANCELLED--CAPS"><literal>MC_ACCOUNT_CR_CANCELLED</literal></link>
occur.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_id</parameter>&#160;:</term>
<listitem><simpara> unique identifier of the channel request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> one <link linkend="McAccountChannelrequestEvent"><type>McAccountChannelrequestEvent</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the user data that was passed when registering the callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GObject"><type>GObject</type></link> that was passed when registering the callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="McAccountChannelrequestFlags" role="enum">
<title>enum McAccountChannelrequestFlags</title>
<indexterm zone="McAccountChannelrequestFlags"><primary sortas="McAccountChannelrequestFlags">McAccountChannelrequestFlags</primary></indexterm><programlisting>typedef enum
{
    MC_ACCOUNT_CR_FLAG_USE_EXISTING = 1 &lt;&lt; 0, /* if set, call EnsureChannel */
} McAccountChannelrequestFlags;
</programlisting>
<para>
</para>
<para>
</para><variablelist role="enum">
<varlistentry id="MC-ACCOUNT-CR-FLAG-USE-EXISTING--CAPS" role="constant">
<term><literal>MC_ACCOUNT_CR_FLAG_USE_EXISTING</literal></term>
<listitem><simpara> allow requesting of an existing channel
(EnsureChannel will be called).
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-channelrequest" role="function">
<title>mc_account_channelrequest ()</title>
<indexterm zone="mc-account-channelrequest"><primary sortas="mc_account_channelrequest">mc_account_channelrequest</primary></indexterm><programlisting><link linkend="guint">guint</link>               mc_account_channelrequest           (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="McAccountChannelrequestData">McAccountChannelrequestData</link> *req_data,
                                                         <link linkend="time-t">time_t</link> user_action_time,
                                                         const <link linkend="gchar">gchar</link> *handler,
                                                         <link linkend="McAccountChannelrequestFlags">McAccountChannelrequestFlags</link> flags,
                                                         <link linkend="McAccountChannelrequestCb">McAccountChannelrequestCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
This is a convenience function that internally calls
<link linkend="mc-account-channelrequest-ht"><function>mc_account_channelrequest_ht()</function></link>. The only difference between the two
functions is that this one takes the requested properties in the form of a
<link linkend="McAccountChannelrequestData"><type>McAccountChannelrequestData</type></link> structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req_data</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="McAccountChannelrequestData"><type>McAccountChannelrequestData</type></link> struct with the requested fields
set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_action_time</parameter>&#160;:</term>
<listitem><simpara> the time at which user action occurred, or <link linkend="0--CAPS"><literal>0</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler</parameter>&#160;:</term>
<listitem><simpara> well-known name of the preferred handler, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> a combination of <link linkend="McAccountChannelrequestFlags"><type>McAccountChannelrequestFlags</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when something happens to the request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the request has
succeeded, failed or been cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; if
it is destroyed, this call will automatically be cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the unique ID of the channel request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-channelrequest-ht" role="function">
<title>mc_account_channelrequest_ht ()</title>
<indexterm zone="mc-account-channelrequest-ht"><primary sortas="mc_account_channelrequest_ht">mc_account_channelrequest_ht</primary></indexterm><programlisting><link linkend="guint">guint</link>               mc_account_channelrequest_ht        (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="GHashTable">GHashTable</link> *properties,
                                                         <link linkend="time-t">time_t</link> user_action_time,
                                                         const <link linkend="gchar">gchar</link> *handler,
                                                         <link linkend="McAccountChannelrequestFlags">McAccountChannelrequestFlags</link> flags,
                                                         <link linkend="McAccountChannelrequestCb">McAccountChannelrequestCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Requests a channel matching all the requested <parameter>properties</parameter>. The channel
request is uniquely identified (inside the process that called this method)
by an unsigned integer ID, which is the return value of the method and also
the second parameter passed to <parameter>callback</parameter>.
</para>
<para>
Unless the <parameter>weak_object</parameter> is destroyed, <parameter>callback</parameter> will be called to notify the
requestor of the progress of its request. The only events supported so far
are <link linkend="MC-ACCOUNT-CR-SUCCEEDED--CAPS"><literal>MC_ACCOUNT_CR_SUCCEEDED</literal></link>, <link linkend="MC-ACCOUNT-CR-FAILED--CAPS"><literal>MC_ACCOUNT_CR_FAILED</literal></link> and
<link linkend="MC-ACCOUNT-CR-CANCELLED--CAPS"><literal>MC_ACCOUNT_CR_CANCELLED</literal></link>, which also happen to signal the end of the request:
after one of these events occur, the request ID is no longer valid, and
<parameter>destroy</parameter> (if it was not <link linkend="NULL--CAPS"><literal>NULL</literal></link>) is called on <parameter>user_data</parameter>.
</para>
<para>
If the <parameter>weak_object</parameter> is destroyed before the channel request is completed,
<parameter>callback</parameter> will not be called anymore, but <parameter>destroy</parameter> (if it was not <link linkend="NULL--CAPS"><literal>NULL</literal></link>) is
called on <parameter>user_data</parameter>; the channel request is left at whatever state it was:
if you want it to be cancelled, you need to call
<link linkend="mc-account-channelrequest-cancel"><function>mc_account_channelrequest_cancel()</function></link> explicitly.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>properties</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> with the requested channel properties.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_action_time</parameter>&#160;:</term>
<listitem><simpara> the time at which user action occurred, or <link linkend="0--CAPS"><literal>0</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler</parameter>&#160;:</term>
<listitem><simpara> well-known name of the preferred handler, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> a combination of <link linkend="McAccountChannelrequestFlags"><type>McAccountChannelrequestFlags</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when something happens to the request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the request has
succeeded, failed or been cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; if
it is destroyed, this call will automatically be cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the unique ID of the channel request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-channelrequest-add" role="function">
<title>mc_account_channelrequest_add ()</title>
<indexterm zone="mc-account-channelrequest-add"><primary sortas="mc_account_channelrequest_add">mc_account_channelrequest_add</primary></indexterm><programlisting><link linkend="guint">guint</link>               mc_account_channelrequest_add       (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *object_path,
                                                         <link linkend="GHashTable">GHashTable</link> *properties,
                                                         <link linkend="McAccountChannelrequestCb">McAccountChannelrequestCb</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
This function adds an existing request, created from another process and
described by <parameter>object_path</parameter> and <parameter>properties</parameter>, to those to be monitored.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> the D-Bus object path of a channel request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>properties</parameter>&#160;:</term>
<listitem><simpara> a D-Bus a{sv} of properties.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when something happens to the request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the request has
succeeded, failed or been cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; if
it is destroyed, this call will automatically be cancelled.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the unique ID of the channel request, or <link linkend="0--CAPS"><literal>0</literal></link> if the request was
already being monitored by another callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-channelrequest-cancel" role="function">
<title>mc_account_channelrequest_cancel ()</title>
<indexterm zone="mc-account-channelrequest-cancel"><primary sortas="mc_account_channelrequest_cancel">mc_account_channelrequest_cancel</primary></indexterm><programlisting><link linkend="void">void</link>                mc_account_channelrequest_cancel    (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id);</programlisting>
<para>
Cancel the channel request identified by <parameter>request_id</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_id</parameter>&#160;:</term>
<listitem><simpara> the ID of the request to be cancelled.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-channelrequest-get-error" role="function">
<title>mc_account_channelrequest_get_error ()</title>
<indexterm zone="mc-account-channelrequest-get-error"><primary sortas="mc_account_channelrequest_get_error">mc_account_channelrequest_get_error</primary></indexterm><programlisting>const <link linkend="GError">GError</link> *      mc_account_channelrequest_get_error (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id);</programlisting>
<para>
Get the last error which occurred on the channel request identified by
<parameter>request_id</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_id</parameter>&#160;:</term>
<listitem><simpara> the ID of the channel request.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GError"><type>GError</type></link> (not to be freed), or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-channelrequest-get-path" role="function">
<title>mc_account_channelrequest_get_path ()</title>
<indexterm zone="mc-account-channelrequest-get-path"><primary sortas="mc_account_channelrequest_get_path">mc_account_channelrequest_get_path</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       mc_account_channelrequest_get_path  (<link linkend="McAccount">McAccount</link> *account,
                                                         <link linkend="guint">guint</link> request_id);</programlisting>
<para>
Get the object path of the channel request identified by <parameter>request_id</parameter>.
The channel request D-Bus object is currently not implemented, but this
object path can be used consistently with the
org.freedesktop.Telepathy.Client.Handler interface.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_id</parameter>&#160;:</term>
<listitem><simpara> the ID of the channel request.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the object path of the channel request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-account-channelrequest-get-from-path" role="function">
<title>mc_account_channelrequest_get_from_path ()</title>
<indexterm zone="mc-account-channelrequest-get-from-path"><primary sortas="mc_account_channelrequest_get_from_path">mc_account_channelrequest_get_from_path</primary></indexterm><programlisting><link linkend="guint">guint</link>               mc_account_channelrequest_get_from_path
                                                        (<link linkend="McAccount">McAccount</link> *account,
                                                         const <link linkend="gchar">gchar</link> *object_path);</programlisting>
<para>
Finds the request ID whose D-Bus object path matches <parameter>object_path</parameter>.
This only works if the request was created by this process.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> the D-Bus object path of a channel request.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the unique ID of the channel request, or <link linkend="0--CAPS"><literal>0</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-signal-callback-removed" role="function">
<title>mc_cli_account_signal_callback_removed ()</title>
<indexterm zone="mc-cli-account-signal-callback-removed"><primary sortas="mc_cli_account_signal_callback_removed">mc_cli_account_signal_callback_removed</primary></indexterm><programlisting><link linkend="void">void</link>                (*mc_cli_account_signal_callback_removed)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal Removed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="mc-cli-account-connect-to-removed"><function>mc_cli_account_connect_to_removed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-connect-to-removed" role="function">
<title>mc_cli_account_connect_to_removed ()</title>
<indexterm zone="mc-cli-account-connect-to-removed"><primary sortas="mc_cli_account_connect_to_removed">mc_cli_account_connect_to_removed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * mc_cli_account_connect_to_removed
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="mc-cli-account-signal-callback-removed">mc_cli_account_signal_callback_removed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal Removed.
</para>
<para>
This account has been removed.          &lt;tp:rationale&gt;           This is redundant with &lt;tp:dbus-ref namespace=&quot;org.freedesktop.Telepathy.AccountManager&quot;&gt;AccountRemoved&lt;/tp:dbus-ref&gt;,           but it&apos;s still worth having,           to avoid having to bind to AccountManager.AccountRemoved to tell           you whether your Account is valid — ideally, an account-editing UI           should only care about a single Account.         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-signal-callback-account-property-changed" role="function">
<title>mc_cli_account_signal_callback_account_property_changed ()</title>
<indexterm zone="mc-cli-account-signal-callback-account-property-changed"><primary sortas="mc_cli_account_signal_callback_account_property_changed">mc_cli_account_signal_callback_account_property_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*mc_cli_account_signal_callback_account_property_changed)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         <link linkend="GHashTable">GHashTable</link> *arg_Properties,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal AccountPropertyChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="mc-cli-account-connect-to-account-property-changed"><function>mc_cli_account_connect_to_account_property_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg_Properties</parameter>&#160;:</term>
<listitem><simpara> A map from property names in this namespace (e.g.           &lt;tp:member-ref&gt;Nickname&lt;/tp:member-ref&gt;) to           values. Properties whose values have not changed SHOULD be           omitted, but this need not be done.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-connect-to-account-property-changed" role="function">
<title>mc_cli_account_connect_to_account_property_changed ()</title>
<indexterm zone="mc-cli-account-connect-to-account-property-changed"><primary sortas="mc_cli_account_connect_to_account_property_changed">mc_cli_account_connect_to_account_property_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * mc_cli_account_connect_to_account_property_changed
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="mc-cli-account-signal-callback-account-property-changed">mc_cli_account_signal_callback_account_property_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal AccountPropertyChanged.
</para>
<para>
The values of one or more properties on this interface (that do not         specify that this signal does not apply to them) may have changed.         This does not cover properties of other interfaces, which must         provide their own change notification if appropriate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-callback-for-remove" role="function">
<title>mc_cli_account_callback_for_remove ()</title>
<indexterm zone="mc-cli-account-callback-for-remove"><primary sortas="mc_cli_account_callback_for_remove">mc_cli_account_callback_for_remove</primary></indexterm><programlisting><link linkend="void">void</link>                (*mc_cli_account_callback_for_remove)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a Remove method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-call-remove" role="function">
<title>mc_cli_account_call_remove ()</title>
<indexterm zone="mc-cli-account-call-remove"><primary sortas="mc_cli_account_call_remove">mc_cli_account_call_remove</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_cli_account_call_remove         (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="mc-cli-account-callback-for-remove">mc_cli_account_callback_for_remove</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a Remove method call.
</para>
<para>
Delete the account.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-callback-for-update-parameters" role="function">
<title>mc_cli_account_callback_for_update_parameters ()</title>
<indexterm zone="mc-cli-account-callback-for-update-parameters"><primary sortas="mc_cli_account_callback_for_update_parameters">mc_cli_account_callback_for_update_parameters</primary></indexterm><programlisting><link linkend="void">void</link>                (*mc_cli_account_callback_for_update_parameters)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         const <link linkend="gchar">gchar</link> **out_Reconnect_Required,
                                                         const <link linkend="GError">GError</link> *error,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Signature of the callback called when a UpdateParameters method call
succeeds or fails.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the proxy on which the call was made
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_Reconnect_Required</parameter>&#160;:</term>
<listitem><simpara> Used to return an 'out' argument if <parameter>error</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>: A list of the names of parameters with changes that will not take           effect until the account is reconnected (this may be empty, e.g. if           all the parameters are D-Bus properties or parameters for which the           account manager has specific support). User interfaces that           require &amp;quot;instant apply&amp;quot; semantics MAY call           &lt;tp:member-ref&gt;Reconnect&lt;/tp:member-ref&gt; in response to receiving           a non-empty list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> on success, or an error on failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> user-supplied object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-call-update-parameters" role="function">
<title>mc_cli_account_call_update_parameters ()</title>
<indexterm zone="mc-cli-account-call-update-parameters"><primary sortas="mc_cli_account_call_update_parameters">mc_cli_account_call_update_parameters</primary></indexterm><programlisting><link linkend="TpProxyPendingCall">TpProxyPendingCall</link> * mc_cli_account_call_update_parameters
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="gint">gint</link> timeout_ms,
                                                         <link linkend="GHashTable">GHashTable</link> *in_Set,
                                                         const <link linkend="gchar">gchar</link> **in_Unset,
                                                         <link linkend="mc-cli-account-callback-for-update-parameters">mc_cli_account_callback_for_update_parameters</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Start a UpdateParameters method call.
</para>
<para>
&lt;tp:docstring xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;         &lt;p&gt;Change the value of the &lt;tp:member-ref&gt;Parameters&lt;/tp:member-ref&gt;           property.&lt;/p&gt;          &lt;p&gt;If any of the changed parameters&apos;           &lt;tp:type&gt;Conn_Mgr_Param_Flags&lt;/tp:type&gt; include           &lt;code&gt;DBus_Property&lt;/code&gt;, the change will be applied to the           corresponding D-Bus Property on the active           &lt;tp:member-ref&gt;Connection&lt;/tp:member-ref&gt;, if there is one. Changes to           other parameters will not take effect until the next time the account           is disconnected and reconnected.&lt;/p&gt;          &lt;tp:rationale&gt;           &lt;p&gt;In general, reconnecting is a destructive operation that shouldn&apos;t             happen as a side-effect. In particular, migration tools that             twiddle the settings of all accounts shouldn&apos;t cause an automatic             disconnect and reconnect.&lt;/p&gt;         &lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="TpProxy"><type>TpProxy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout_ms</parameter>&#160;:</term>
<listitem><simpara> the timeout in milliseconds, or -1 to use the
  default
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Set</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A mapping from parameter names to their values. These parameters           should be stored for future use.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_Unset</parameter>&#160;:</term>
<listitem><simpara> Used to pass an 'in' argument: A list of the names of parameters to be removed from the set of           stored values, allowing the default values to be used.           If the given parameters were not, in fact, stored, or even if they           do not exist at all, the account manager MUST accept this without           error.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> called when the method call succeeds or fails;
  may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> to make a "fire and forget" call with no 
  reply tracking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user-supplied data passed to the callback;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> called with the user_data as argument, after the
  call has succeeded, failed or been cancelled;
  must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a <link linkend="GObject"><type>GObject</type></link> which will be 
  weakly referenced; if it is destroyed, this call 
  will automatically be cancelled. Must be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if 
  <parameter>callback</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxyPendingCall"><type>TpProxyPendingCall</type></link> representing the call in
 progress. It is borrowed from the object, and will become
 invalid when the callback is called, the call is
 cancelled or the <link linkend="TpProxy"><type>TpProxy</type></link> becomes invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-interface-avatar-signal-callback-avatar-changed" role="function">
<title>mc_cli_account_interface_avatar_signal_callback_avatar_changed ()</title>
<indexterm zone="mc-cli-account-interface-avatar-signal-callback-avatar-changed"><primary sortas="mc_cli_account_interface_avatar_signal_callback_avatar_changed">mc_cli_account_interface_avatar_signal_callback_avatar_changed</primary></indexterm><programlisting><link linkend="void">void</link>                (*mc_cli_account_interface_avatar_signal_callback_avatar_changed)
                                                        (<link linkend="TpProxy">TpProxy</link> *proxy,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GObject">GObject</link> *weak_object);</programlisting>
<para>
Represents the signature of a callback for the signal AvatarChanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> The proxy on which <link linkend="mc-cli-account-interface-avatar-connect-to-avatar-changed"><function>mc_cli_account_interface_avatar_connect_to_avatar_changed()</function></link>
 was called
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> User-supplied weakly referenced object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="mc-cli-account-interface-avatar-connect-to-avatar-changed" role="function">
<title>mc_cli_account_interface_avatar_connect_to_avatar_changed ()</title>
<indexterm zone="mc-cli-account-interface-avatar-connect-to-avatar-changed"><primary sortas="mc_cli_account_interface_avatar_connect_to_avatar_changed">mc_cli_account_interface_avatar_connect_to_avatar_changed</primary></indexterm><programlisting><link linkend="TpProxySignalConnection">TpProxySignalConnection</link> * mc_cli_account_interface_avatar_connect_to_avatar_changed
                                                        (<link linkend="gpointer">gpointer</link> proxy,
                                                         <link linkend="mc-cli-account-interface-avatar-signal-callback-avatar-changed">mc_cli_account_interface_avatar_signal_callback_avatar_changed</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="GObject">GObject</link> *weak_object,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Connect a handler to the signal AvatarChanged.
</para>
<para>
Emitted when the Avatar property changes.          &lt;tp:rationale&gt;The avatar itself is deliberately not included in this           signal, to reduce bus traffic in the (likely common) case where no           running application cares about the user&apos;s own avatar.&lt;/tp:rationale&gt;</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>proxy</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="TpProxy"><type>TpProxy</type></link> or subclass
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback to be called when the signal is
  received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User-supplied data for the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> Destructor for the user-supplied data, which
  will be called when this signal is disconnected, or
  before this function returns <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>weak_object</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GObject"><type>GObject</type></link> which will be weakly referenced; 
  if it is destroyed, this callback will automatically be
  disconnected
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> If not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, used to raise an error if <link linkend="NULL--CAPS"><literal>NULL</literal></link> is
  returned
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="TpProxySignalConnection"><type>TpProxySignalConnection</type></link> containing all of the
above, which can be used to disconnect the signal; or
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if the proxy does not have the desired interface
or has become invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="libmcclient-mc-account.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="McAccount-avatar-changed" role="signal"><title>The <literal>&quot;avatar-changed&quot;</literal> signal</title>
<indexterm zone="McAccount-avatar-changed"><primary sortas="McAccount::avatar-changed">McAccount::avatar-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McAccount">McAccount</link>      *account,
                                                        <link linkend="GArray-guchar-">GArray_guchar_</link> *avatar,
                                                        <link linkend="gchar">gchar</link>          *mime_type,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when the avatar changes.
This signal will be emitted only once
<link linkend="mc-account-avatar-call-when-ready"><function>mc_account_avatar_call_when_ready()</function></link> has been successfully invoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>avatar</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GArray"><type>GArray</type></link> of bytes, carrying the avatar data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&#160;:</term>
<listitem><simpara> the MIME type of the avatar data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McAccount-channel-count-changed" role="signal"><title>The <literal>&quot;channel-count-changed&quot;</literal> signal</title>
<indexterm zone="McAccount-channel-count-changed"><primary sortas="McAccount::channel-count-changed">McAccount::channel-count-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McAccount">McAccount</link>  *account,
                                                        <link linkend="GHashTable">GHashTable</link> *channel_count,
                                                        <link linkend="gpointer">gpointer</link>    user_data)          : Run Last</programlisting>
<para>
Emitted when the stats changes.
The McAccount member data are updated in the signal closure, so use
<link linkend="g-signal-connect-after"><function>g_signal_connect_after()</function></link> if you need them to reflect the new status.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>channel_count</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> with the new channel counters.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McAccount-connection-status-changed" role="signal"><title>The <literal>&quot;connection-status-changed&quot;</literal> signal</title>
<indexterm zone="McAccount-connection-status-changed"><primary sortas="McAccount::connection-status-changed">McAccount::connection-status-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McAccount">McAccount</link> *mcaccount,
                                                        <link linkend="guint">guint</link>      arg1,
                                                        <link linkend="guint">guint</link>      arg2,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>mcaccount</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McAccount-flag-changed" role="signal"><title>The <literal>&quot;flag-changed&quot;</literal> signal</title>
<indexterm zone="McAccount-flag-changed"><primary sortas="McAccount::flag-changed">McAccount::flag-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McAccount">McAccount</link> *account,
                                                        <link linkend="guint">guint</link>      detail,
                                                        <link linkend="gboolean">gboolean</link>   value,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when a boolean property changes (such as valid, enabled).
</para>
<para>
This signal will be emitted only once <link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> has
been successfully invoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>detail</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GQuark"><type>GQuark</type></link> specifying which flag has changed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> the new vaule for the boolean property.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McAccount-parameters-changed" role="signal"><title>The <literal>&quot;parameters-changed&quot;</literal> signal</title>
<indexterm zone="McAccount-parameters-changed"><primary sortas="McAccount::parameters-changed">McAccount::parameters-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McAccount">McAccount</link>  *account,
                                                        <link linkend="GHashTable">GHashTable</link> *old,
                                                        <link linkend="GHashTable">GHashTable</link> *new,
                                                        <link linkend="gpointer">gpointer</link>    user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when the account parameters change. Don't modify the passed-in
hash tables.
</para>
<para>
This signal will be emitted only once <link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> has
been successfully invoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GHashTable"><type>GHashTable</type></link> of the old account parameters.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GHashTable"><type>GHashTable</type></link> of the new account parameters.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McAccount-presence-changed" role="signal"><title>The <literal>&quot;presence-changed&quot;</literal> signal</title>
<indexterm zone="McAccount-presence-changed"><primary sortas="McAccount::presence-changed">McAccount::presence-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McAccount">McAccount</link> *account,
                                                        <link linkend="guint">guint</link>      detail,
                                                        <link linkend="guint">guint</link>      type,
                                                        <link linkend="gchar">gchar</link>     *status,
                                                        <link linkend="gchar">gchar</link>     *message,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when the current, requested or automatic presence changes.
</para>
<para>
This signal will be emitted only once <link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> has
been successfully invoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>detail</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GQuark"><type>GQuark</type></link> specifying which presence has changed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the presence type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> the presence status string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> the presence status message.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="McAccount-string-changed" role="signal"><title>The <literal>&quot;string-changed&quot;</literal> signal</title>
<indexterm zone="McAccount-string-changed"><primary sortas="McAccount::string-changed">McAccount::string-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="McAccount">McAccount</link> *account,
                                                        <link linkend="guint">guint</link>      status,
                                                        <link linkend="gchar">gchar</link>     *reason,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last / Has Details</programlisting>
<para>
Emitted when the connection status changes.
</para>
<para>
This signal will be emitted only once <link linkend="mc-account-call-when-ready"><function>mc_account_call_when_ready()</function></link> has
been successfully invoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>account</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="McAccount"><type>McAccount</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> the connection status.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&#160;:</term>
<listitem><simpara> the connection status reason.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
